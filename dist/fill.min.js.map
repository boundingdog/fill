{"version":3,"file":"fill.min.js","sources":["../src/region.js","../src/window-resize-listener.js","../src/cell-size-calculator.js","../src/layout-manager.js","../src/fill-jquery-plugin.js","../src/fill.js"],"names":["fill","classes","$","DATA_REGEX","region","el","options","this","_init","prototype","type","str","val","contentClass","defaults","_computed","_origStyle","attr","css","position","row","col","rowSpan","colSpan","top","right","bottom","left","_properties","extend","data","match","exec","length","isNaN","parseInt","trim","wrapInner","get","name","setComputed","value","setEdges","removeClass","addClass","fireResizeEvent","width","height","previous","current","undefined","trigger","destroy","html","removeAttr","Region","jQuery","listener","_callbacks","addHandler","callback","id","self","Date","getTime","Object","keys","window","on","_fireResizeEvent","removeHandler","off","WindowResizeListener","calculator","container","_container","_rows","key","sizes","_cols","addCell","getRowHeight","getColWidth","calculate","_calculate","map","size","itemCnt","remaining","userCells","i","_detectUserSize","index","appendTo","remove","CellSizeCalculator","layoutManager","padding","_config","_el","pixelPadding","_getPaddingInPixels","_cellCalculator","_buildLayout","_width","_height","_renderLayout","regions","span","grid","rows","colCnt","tmp","_dimensions","cols","console","warn","_grid","Array","x","y","regionWid","regionHt","args","halfPadding","_getColSpan","regionsInRow","alert","tempEl","pixel","indexOf","substr","outerWidth","outerHeight","Math","floor","refresh","newWid","newHt","j","LayoutManager","plugin","autoRefresh","config","_registerEventListeners","_layoutManager","_resizeHandlerId","_refresh","create","resize","FillPlugin","version","action","makeArray","arguments","splice","each","removeData","fn"],"mappings":"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","sourcesContent":["var fill = fill || {};\nfill.classes = fill.classes || {};\n\n(function($){\n\n    var DATA_REGEX = /\\b([\\w|-]+)\\s*:\\s*([\\w|\"|'|\\*]+)\\s*;?/g;\n\n    var region = function(el, options){\n        this.el = el;\n        this._init(options);\n    };\n\n    region.prototype.type = \"Region\";\n\n    /**\n     * Initializes the Region which is pretty much just merging the\n     * supplied option set with the defaults\n     * @param options\n     * @private\n     */\n    region.prototype._init = function(options){\n        var str, val, contentClass, defaults;\n\n        this._computed = {};\n\n        //Save off the original style attributes so we can reset things properly if\n        //destroy is called\n        this._origStyle = this.el.attr(\"style\");\n\n        this.el.css( { \"position\" : \"absolute\" });\n\n        defaults = { row : -1, col: -1,\n                        rowSpan: 1, colSpan: 1,\n                        contentClass : \"\",\n                        top : false, right: false, bottom: false, left: false };\n        this._properties = $.extend({}, defaults, options);\n\n\n        str = this.el.data(\"fill\");\n        if (str) {\n            while(null !== (match = DATA_REGEX.exec(str))){\n                if (3===match.length){\n                    val = match[2];\n                    if (!isNaN(val))\n                        val = parseInt(val, 10);\n                    this._properties[match[1]] = val;\n                }\n            }\n        }\n        //alert(JSON.stringify(this._properties));\n        //If the caller supplied a content class to make styling things a little easier, apply it to the region\n        //wrapper here\n        contentClass = \"\";\n        if (this._properties.contentClass && \"\" !== this._properties.contentClass.trim())\n            contentClass = this._properties.contentClass;\n\n        //Wrap the fill region element in a div. This will allow us to apply padding to the regions and still make\n        //it easy for the user to stylize the original element. Borders, for example would be applied on the outside edges\n        //of the padding (negating the purpose of the padding) if we don't do this wrapping.\n        this.el.wrapInner(\"<div class='fill-region-wrapper \" + contentClass + \"'></div>\");\n    };\n\n    /**\n     * Property getter\n     */\n    region.prototype.get = function(name){\n        if (typeof this._computed[name] !== 'undefined')\n            return(this._computed[name]);\n        else if (typeof this._properties[name] !== 'undefined')\n            return(this._properties[name]);\n        return(null);\n    };\n\n    /**\n     * Property setter\n     * @param name\n     * @param value\n     */\n    region.prototype.setComputed = function(name, value){\n        this._computed[name] = value;\n    };\n\n    /**\n     * Sets flags indicating if this is an edge region and which edges it lies on\n     * @param top\n     * @param right\n     * @param bottom\n     * @param left\n     */\n    region.prototype.setEdges = function(top, right, bottom, left){\n        var removeClass;\n\n        this._properties.top = top;\n        this._properties.right = right;\n        this._properties.bottom = bottom;\n        this._properties.left = left;\n\n        //Add edge classes to this top level element. This is a convenience to enable\n        //users to style these regions a little easier (for example custom padding)\n        this.el.addClass(\"fill\"\n                            + (top ? \" fill-top\" : \"\")\n                            + (right ? \" fill-right\" : \"\")\n                            + (bottom ? \" fill-bottom\" : \"\")\n                            + (left ? \" fill-left\" : \"\"));\n\n        //Remove the edge classes in case they were set previously\n        removeClass = \"\";\n        if (!top)\n            removeClass += \"fill-top \";\n        if (!right)\n            removeClass += \"fill-right \";\n        if (!bottom)\n            removeClass += \"fill-bottom \";\n        if (!left)\n            removeClass += \"fill-left \";\n        this.el.removeClass(removeClass);\n    };\n\n    /**\n     * Fires a resize event if the region's width or height has changed.\n     */\n    region.prototype.fireResizeEvent = function(){\n        var width, height;\n\n        width = this.el.width();\n        height = this.el.height();\n\n        //Populate the event with the old dimensions before we store the new ones\n        data = {\n                    previous : { width: this._properties.width,\n                                    height: this._properties.height },\n                    current : {}\n                };\n\n        this._properties.width = width;\n        this._properties.height = height;\n\n        //Check to see if anything actually changed before firing off the resize event.\n        // Also don't fire a resize event if this is the first time the width and height are\n        //being set\n        if (undefined !== data.previous.width && (data.previous.width !== width || data.previous.height !== height)) {\n\n            data.current.width = width;\n            data.current.height = height;\n\n            this.el.trigger(\"fillresize\", data);\n        }\n\n        //console.log(\"Row=\" + this._properties.row + \" Col=\" + this._properties.col + \" Size=\" + width+\"x\" + height);\n    };\n\n    /**\n     * Reverts the region to its original state (before the fill plugin was applied)\n     */\n    region.prototype.destroy = function(){\n\n        //Remove the .fill-region-wrapper we added at init time.\n        this.el.html($(\"> .fill-region-wrapper\", this.el).html());\n        //Remove the css we applied (as a style attribute) to position/size everything\n        if (this._origStyle)\n            this.el.attr(\"style\", this._origStyle);\n        else\n            this.el.removeAttr(\"style\");\n        //Remove the convenience edge classes we may have added\n        this.el.removeClass(\"fill fill-top fill-right fill-bottom fill-left\");\n    };\n\n    fill.classes.Region = region;\n\n})(jQuery);","var fill = fill || {};\nfill.classes = fill.classes || {};\n\n(function($){\n\n    var listener = function(){\n        this._callbacks = {};\n    };\n\n    /**\n     * Adds a new resize handler to the listener.\n     * @param callback\n     */\n    listener.prototype.addHandler = function(callback){\n        var id, self = this;\n\n        id = new Date().getTime();\n        this._callbacks[id] = callback;\n        //Hook up to the window resize event if this is the first handler applied.\n        if (1===Object.keys(this._callbacks).length){\n            $(window).on(\"resize.fill\", function() { self._fireResizeEvent(); } );\n        }\n        return(id);\n    };\n\n    /**\n     * Removes a resize handler from the listener.\n     * @param callback\n     */\n    listener.prototype.removeHandler = function(id){\n        delete this._callbacks[id];\n        if (0===Object.keys(this._callbacks).length){\n            $(window).off(\"resize.fill\");\n        }\n    };\n\n    listener.prototype._fireResizeEvent = function(){\n        for(var id in this._callbacks){\n            this._callbacks[id]();\n        }\n    };\n\n    fill.classes.WindowResizeListener = new listener();\n\n})(jQuery);","var fill = fill || {};\nfill.classes = fill.classes || {};\n\n(function($){\n\n    var calculator = function(container){\n        this._container = container;\n\n        this._rows = { key: \"row\", sizes : {} };\n        this._cols = { key: \"col\", sizes : {} };\n    };\n\n    calculator.prototype.addCell = function(row, col){\n        if (\"undefined\" === typeof this._rows.sizes[row])\n            this._rows.sizes[row] = { type: null };\n        if (\"undefined\" === typeof(this._cols[col]))\n            this._cols.sizes[col] = { type : null }\n    };\n\n    /**\n     * Returns the height of the requested row\n     * @param row\n     * @returns {*}\n     */\n    calculator.prototype.getRowHeight = function(row){\n        return(this._rows.sizes[row].size);\n    };\n\n    /**\n     * Returns the width of the requested column\n     * @param col\n     * @returns {*}\n     */\n    calculator.prototype.getColWidth = function(col){\n        return(this._cols.sizes[col].size);\n    };\n\n    /**\n     * TODO comment\n     */\n    calculator.prototype.calculate = function(width, height){\n        if (0<width)\n            this._calculate(this._cols, width);\n        if (0<height)\n            this._calculate(this._rows, height);\n\n        //alert(JSON.stringify(this._rows));\n        //alert(JSON.stringify(this._cols));\n    };\n\n    /**\n     * TODO COmment\n     * @param map\n     * @private\n     */\n    calculator.prototype._calculate = function(map, size){\n\n        var itemCnt, remaining, userCells;\n\n        itemCnt = userCells = Object.keys(map.sizes).length;\n        remaining = size;\n        for(var i=0; i<itemCnt; i++) {\n            if (\"computed\" !== map.type) {\n                map.sizes[i].size = this._detectUserSize(map.key, i);\n                map.sizes[i].type = (0<map.sizes[i].size ? \"user\" : \"computed\");\n            }\n\n            if (0<map.sizes[i].size){\n                remaining -= map.sizes[i].size;\n                userCells--;\n            }\n        }\n        //Fill in computed values\n        for(var i=0; i<itemCnt; i++){\n            if (\"computed\" === map.sizes[i].type)\n                map.sizes[i].size = remaining / userCells;\n        }\n\n    };\n\n    /**\n     * Checks to see if the user has set a width/height for this col/row in a stylesheet\n     * @param key \"row\" or \"col\" string\n     * @param index Integer index of the row or column as defined in the HTML\n     * @returns {number} Integer width or height of the cell. Returns 0 if not defined in stylesheet\n     * @private\n     */\n    calculator.prototype._detectUserSize = function(key, index){\n        var el, size = 0;\n\n        //Add an invisible element to the parent container and check its width or height. If its not 0, then the user\n        //has set a value for it in the CSS.\n        //Note:\n        // - The returned value will always be in pixels (Even if the user puts some other unit in the stylesheets).\n        //   There's not really a good way to get the original units.\n        // - The float is because the div is a block elem and will automatically fill the entire available width.\n        //   Floating it prevents this.\n        el = $(\"<div class='fill-\" + key + \"-\"+index+\"' style='float:left;visibility:hidden'></div>\").appendTo(this._container);\n        if (\"row\" === key)\n            size = el.height();\n        else if (\"col\" === key)\n            size = el.width();\n        el.remove();\n        return(size);\n    };\n\n    fill.classes.CellSizeCalculator = calculator;\n})(jQuery);","var fill = fill || {};\nfill.classes = fill.classes || {};\n\n(function($){\n\n    var layoutManager = function(el, options){\n        var defaults = { padding: 0 };\n\n        this._config = $.extend({}, defaults, options);\n        this._el = el;\n\n        this._init();\n    };\n\n    /**\n     * Performs miscellaneous initialization logic before kicking off the layout process\n     * @private\n     */\n    layoutManager.prototype._init = function(){\n\n        //Convert the supplied padding value to pixels (if not already)\n        this._config.pixelPadding = this._getPaddingInPixels(this._config.padding);\n\n        //Save off the original style attributes so we can revert things properly when\n        //destroy is called\n        this._origStyle = this._el.attr(\"style\");\n\n        this._el.css({ 'position' : 'relative' });\n\n        this._cellCalculator = new fill.classes.CellSizeCalculator(this._el);\n\n        this._buildLayout();\n\n        //Calculate the sizes of rows and columns based on the current container dimensions and then\n        //render the layout.\n        this._cellCalculator.calculate(this._width - this._config.pixelPadding,\n                                        this._height-this._config.pixelPadding);\n        this._renderLayout();\n\n        //Fire off an event letting anyone listening that the layout has been applied\n        this._el.trigger(\"fillcreate\", { });\n    };\n\n    /**\n     * TODO comments\n     * @private\n     */\n    layoutManager.prototype._buildLayout = function(){\n        var regions, region, row, col, span, grid, rows, colCnt, tmp;\n\n        this._width = this._el.width();\n        this._height = this._el.height();\n        this._dimensions = { rows : { }, cols : { } };\n\n        grid = {};\n        colCnt = 0;\n        regions = $(\"> [data-fill]\", this._el);\n        for(var i=0; i<regions.length; i++){\n\n            region = new fill.classes.Region($(regions[i]), { contentClass : this._config.contentClass} );\n            row = region.get(\"row\");\n            col = region.get(\"col\");\n            if (null===row || null===col|| 0>row || 0>col) {\n                console.warn(\"Fill region does not have a row and col defined. Region will be skipped\");\n                continue;\n            }\n\n            //TODO comments\n            if (!grid[row]) {\n                grid[row] = {};\n            }\n\n            if (grid[row][col]){\n                console.warn(\"Duplicate region defined for fill region (\"+row + \",\" + col +\"). Region will be skipped.\");\n                continue;\n            }\n\n            this._cellCalculator.addCell(row, col);\n            grid[row][col] = region;\n\n            //Increment the grid's max column count if the # of columns in this row is greater than any existing row.\n            if (colCnt < Object.keys(grid[row]).length)\n                colCnt++;\n        }\n\n        //TODO sort row and cols to make sure they are in correct order\n        //TODO normalize the row / cols in case the user doesn't specify them in incremental order\n        //Convert the local grid variable from an Object to a multidimensional array\n        rows = Object.keys(grid);\n        this._grid = new Array(rows);\n        for(var row in grid){\n            this._grid[row] = new Array(colCnt);\n            for(var col in grid[row]){\n                region = grid[row][col];\n                this._grid[row][col] = region;\n\n                //Mark off the cells in the grid where this region will expand to\n                span = region.get(\"colSpan\");\n                if (!isNaN(span) && 1<span){\n                    for(var i=col+1; i<col+span; i++){\n                        this._grid[row][i] = true;\n                    }\n                }\n            }\n        }\n        //Iterate the grid again and calculate col/row spans for wildcards and assign edges to the regions\n        for(var row=0; row<this._grid.length; row++) {\n\n            for(var col=0; col<this._grid[row].length; col++) {\n                region = this._grid[row][col];\n                if (region && region.type && \"Region\" === region.type) {\n\n                    if (\"*\"===region.get(\"colSpan\"))\n                    {\n                        span = 1;\n                        for(var i=col+1; i<this._grid[row].length; i++) {\n                            tmp = this._grid[row][i];\n                            //alert(this._grid[row][i]);\n                            //if (tmp && ((tmp.type && \"Region\" === tmp.type) || \"*\" === tmp))\n                            if (undefined !== tmp)\n                                break;\n                            span++;\n                            this._grid[row][i] = true;\n                        }\n                        region.setComputed(\"colSpan\", span);\n                    }\n                    if (\"*\"===region.get(\"rowSpan\"))\n                    {\n                        span = 1;\n                        for(var i=row+1; i<this._grid.length; i++) {\n                            tmp = this._grid[i][col];\n                            if (undefined !== tmp)\n                                break;\n                            span++;\n                            this._grid[i][col] = true;\n                        }\n                        region.setComputed(\"rowSpan\", span);\n                    }\n                    //Tag this region as right/left/top/bottom\n                    region.setEdges(0 == row, //Top\n                        (col - 1 + region.get(\"colSpan\")) == (colCnt - 1), //Right\n                        (row - 1 + region.get(\"rowSpan\")) == (rows.length - 1), //Bottom\n                        0 == col); //Left\n                }\n            }\n        }\n    };\n\n    /**\n     * TODO Comments\n     * @private\n     */\n    layoutManager.prototype._renderLayout = function(){\n        var region, x, y, regionWid, regionHt, args, pixelPadding, halfPadding, padding;\n\n        //Skip out of this function if there's nothing in the grid\n        if (!this._grid || 0===this._grid.length)\n            return(0);\n\n        pixelPadding = this._config.pixelPadding;\n        halfPadding = pixelPadding/2;\n\n        y = halfPadding;\n        for(var row=0; row<this._grid.length; row++){\n            x = halfPadding;\n            for(var col=0; col<this._grid[row].length; col++) {\n\n                //Grab a reference to the next region. Not all spaces in the grid will be populated (because of\n                //multi spanning cols/rows or just left empty). If this is a blank region, skip this loop iteration.\n                region = this._grid[row][col];\n                if (undefined === region || !region.type) {\n                    x += this._cellCalculator.getColWidth(col);\n                    continue;\n                }\n\n                regionWid = this._cellCalculator.getColWidth(col);\n                for(var tmp = col+1; tmp<col+region.get(\"colSpan\"); tmp++) {\n                    regionWid += this._cellCalculator.getColWidth(tmp);\n                }\n                regionHt = this._cellCalculator.getRowHeight(row);\n                for(var tmp = row+1; tmp<row+region.get(\"rowSpan\"); tmp++) {\n                    regionHt += this._cellCalculator.getRowHeight(tmp);\n                }\n\n                args = { top: y+\"px\",\n                    left: x +\"px\",\n                    width : (regionWid - pixelPadding ) + \"px\",\n                    height: (regionHt - pixelPadding) +\"px\" };\n\n                //If this region is a right or bottom edge, remove the width/height and set the\n                //right / bottom properties. This mimimizes the effect of an incorrectly reported\n                //container size as referenced in issue #2.\n                if (region.get(\"right\"))\n                {\n                    delete args.width;\n                    args.right = this._width - (x + regionWid) + \"px\";\n                }\n                if (region.get(\"bottom\")){\n                    delete args.height;\n                    args.bottom = this._height - (y + regionHt) + \"px\";\n                }\n\n                if (0!==pixelPadding)\n                {\n                    //Add a uniform padding to all the components. We can't simply add a single padding to the component\n                    //as a whole because that would result in the internal margins being 2x the size of the borders on\n                    //the edges. So add a padding to the right and bottom side of every component. Also add a top\n                    //padding if the component is in the first row and a left padding if in the first col\n                    padding = halfPadding + \"px \" + halfPadding + \"px \"; //Top and Right padding\n                    padding += halfPadding + \"px \" + halfPadding + \"px\"; //Bottom and Left padding\n                    args.padding = padding;\n                }\n                //alert(JSON.stringify(args));\n                region.el.css(args);\n                region.fireResizeEvent();\n\n                x += this._cellCalculator.getColWidth(col);\n            }\n            y += this._cellCalculator.getRowHeight(row);\n        }\n    };\n\n    /**\n     * Returns the colSpan for the region. If the colSpan is numeric, that value will be\n     * returned. If the colSpan is the wildcard (\"*\"), colSPan will attempt to fill the\n     * row until it meets\n     * @param region\n     * @returns {*}\n     * @private\n     */\n    layoutManager.prototype._getColSpan = function(region){\n        var regionsInRow, colSpan = region.get(\"colSpan\");\n        if (\"*\"===colSpan){\n            alert(\"Foo\");\n            colSpan = 1;\n            regionsInRow = this._grid[region.get(\"row\")];\n            for(var i=region.get(\"col\")+1; i<regionsInRow.length; i++){\n                if (undefined !== regionsInRow[i] && null!==regionsInRow[i])\n                    break;\n                colSpan++;\n            }\n            alert(colSpan);\n        }\n        return(colSpan);\n    };\n\n    /**\n     * Returns the configured padding in pixels (as an integer)\n     * @private\n     */\n    layoutManager.prototype._getPaddingInPixels = function(padding){\n        var tempEl, pixel = padding;\n\n        //First check the supplied padding value. This will have been supplied in the JS options\n        //when the plugin was applied to the element. If a padding was not supplied in the options\n        //then check to see if a padding was defined in the CSS via the fill-padding class\n        if(\"string\" === typeof(padding)){\n            //If the value was already supplied as pixels, just parse the string and return the value\n            //as an integer\n            if (padding.indexOf(\"px\") === (padding.length-2)){\n                pixel = parseInt(padding.substr(0, padding.length-2), 10);\n            } else {\n                //If its not supplied in pixels, we'll have to add a temporary element to the container\n                //and set the size to see the pixel value when applied to the DOM\n                tempEl = $(\"<div style='position:absolute;visible:visible;width:\"+padding+\"'></div>\").appendTo(this._el);\n                pixel = tempEl.width();\n                tempEl.remove();\n            }\n        } else {\n            tempEl = $(\"<div style='position:absolute;visible:visible;' class='fill-padding'></div>\").appendTo(this._el);\n            if (tempEl.outerWidth() === tempEl.outerHeight()) {\n                pixel = Math.floor(tempEl.outerWidth() / 2);\n            } else {\n                console.warn(\"Fill layout manager does not support different vertical and horizontal paddings.\");\n                pixel = 0;\n            }\n            tempEl.remove();\n        }\n        return(pixel);\n    };\n\n    layoutManager.prototype.refresh = function(){\n        //TODO check for changes to HTML? padding?\n        var newWid, newHt;\n\n        newWid = this._el.width();\n        newHt = this._el.height();\n\n        if (newWid !== this._width || newHt !== this._height) {\n            this._cellCalculator.calculate(newWid !== this._width ?  (newWid - this._config.pixelPadding) : -1,\n                                            newHt !== this._height ? (newHt-this._config.pixelPadding) : -1);\n\n            this._width = newWid;\n            this._height = newHt;\n        }\n        //Re-render\n        this._renderLayout();\n    };\n\n    /**\n     * Reverts the fill container and components to their original state (before the fill plugin was applied)\n     */\n    layoutManager.prototype.destroy = function(){\n        var region;\n\n        //Call destroy on each component in the grid\n        if (0<this._grid.length) {\n            for (var i = 0; i < this._grid.length; i++) {\n                for (var j = 0; j < this._grid[i].length; j++) {\n\n                    region = this._grid[i][j];\n                    if (typeof region === \"undefined\" || null===region)\n                        continue;\n\n                    region.destroy();\n                }\n            }\n        }\n\n        //Revert the container to its original style attributes\n        if (this._origStyle)\n            this._el.attr(\"style\", this._origStyle);\n        else\n            this._el.removeAttr(\"style\");\n\n        //Fire off an event letting anyone listening that the layout has been removed\n        this._el.trigger(\"filldestroy\", { });\n    };\n\n    fill.classes.LayoutManager = layoutManager;\n\n})(jQuery);","var fill = fill || {};\nfill.classes = fill.classes || {};\n\n(function($){\n\n    var plugin = function(el, options){\n\n        var defaults = { autoRefresh : true };\n        this._init(el, $.extend({}, defaults, options));\n    };\n\n    /**\n     * Performs initialization logic for the plugin\n     * @private\n     */\n    plugin.prototype._init = function(el, config){\n        var self = this;\n\n        this._el = el;\n        this._config = config;\n\n        this._registerEventListeners();\n        this._layoutManager = new fill.classes.LayoutManager(el, config);\n\n        if (this._config.autoRefresh)\n            this._resizeHandlerId = fill.classes.WindowResizeListener.addHandler(function(){ self._refresh(); });\n    };\n\n    /**\n     * Adds any callback supplied in the options to the element as jquery event listeners\n     * @private\n     */\n    plugin.prototype._registerEventListeners = function(){\n        if (this._config.create)\n            this._el.on(\"fillcreate.fill-internal\", this._config.create);\n        if (this._config.resize)\n            this._el.on(\"fillresize.fill-internal\", this._config.resize);\n        if (this._config.destroy)\n            this._el.on(\"filldestroy.fill-internal\", this._config.destroy);\n    };\n\n    /**\n     * Refreshes the fill components layout. This may be called via a window resize event or be the caller.\n     * @private\n     */\n    plugin.prototype._refresh = function(){\n        //TODO just recalc component sizes\n        //TODO just reapply properties\n        this._layoutManager.refresh();\n    };\n\n    plugin.prototype.refresh = function(){\n        this._refresh();\n    };\n\n    /**\n     * Reverts all DOM elements to their original state before the fill plugin was applied\n     */\n    plugin.prototype.destroy = function(){\n        //1. Remove the window resize handler (if it was applied)\n        //2. Call destroy on the layout manager which will then call destroy on all the fill component DOM elements\n        //3. Delete the layout manager, just because...\n        //4. Clean up any event listeners we added\n        if (this._resizeHandlerId)\n            fill.classes.WindowResizeListener.removeHandler(this._resizeHandlerId);\n\n        this._layoutManager.destroy();\n        delete this._layoutManager;\n\n        this._el.off(\"fillcreate.fill-internal\");\n        this._el.off(\"filldestroy.fill-internal\");\n        this._el.off(\"fillresize.fill-internal\");\n    };\n\n    fill.classes.FillPlugin = plugin;\n\n})(jQuery);","var fill = fill || {};\n\n(function($){\n\n    fill.version = \"0.1.0\";\n\n    var plugin = function() {\n            var el, plugin, args, action, options;\n\n            //var start = window.performance.now();\n\n            //Grab any arguments passed into the fill function and convert to array. If the 1st argument is a string,\n            //then the caller is requesting some action to be performed on an existance instance of fill (refresh,\n            //destroy) etc. The second argument may be a JSON object of parameters to pass into the function. If the\n            //first argument is not a string, then it must be a JSON object of parameters that will be passed into the\n            //c'tor of our fill plugin class\n            args = $.makeArray(arguments);\n            if (\"string\" === typeof args[0]) {\n                action = args[0];\n                args = args.splice(0);\n            }\n            options = args[0];\n\n            //Loop through the elements that matched the user's selector and create a Fill plugin for each one\n            $.each(this, function () {\n\n                el = $(this);\n                plugin = el.data(\"fill-pi\");\n                if (!plugin && !action)\n                {\n                    plugin = new fill.classes.FillPlugin(el, options);\n                    el.data('fill-pi', plugin);\n                } else if (plugin && action){\n                    plugin[action](options);\n                    //Destroy is a special case\n                    if (\"destroy\" === action)\n                        el.removeData(\"fill-pi\");\n                }\n            })\n\n            //var end = window.performance.now();\n            //console.log(\"Fill plug-in time: \" + (end-start) + \"millis\");\n\n            return (this);\n        }\n\n    //Add the fill plug-in to jQuery\n    if (!$.fn.fill)\n        $.fn.fill = plugin;\n    else\n        console.warn(\"jQuery.fn.fill is already defined. Fill Layout Manager cannot be loaded.\");\n\n})(jQuery);"]}