{"version":3,"file":"fill.min.js","sources":["../src/region.js","../src/window-resize-listener.js","../src/cell-size-calculator.js","../src/layout-manager.js","../src/fill-jquery-plugin.js","../src/fill.js"],"names":["fill","classes","$","DATA_REGEX","region","el","options","this","_init","prototype","type","str","val","contentClass","defaults","_computed","_origStyle","attr","css","position","margin","padding","row","col","rowSpan","colSpan","top","right","bottom","left","_properties","extend","data","match","exec","length","isNaN","parseInt","trim","wrapInner","get","name","setComputed","value","setEdges","removeClass","addClass","fireResizeEvent","width","height","previous","current","undefined","trigger","destroy","html","removeAttr","Region","jQuery","listener","_callbacks","addHandler","callback","id","self","Date","getTime","Object","keys","window","on","_fireResizeEvent","removeHandler","off","WindowResizeListener","calculator","container","_container","_cells","_rowCnt","_colCnt","createCells","cells","wrapper","map","size","appendTo","rows","cols","each","index","cell","_detectAppliedSizes","Math","max","innerWidth","innerHeight","remove","testCell","cls","percentSize","obj","calculate","fillCells","remaining","cellSizes","_calculateCellSizes","containerSize","sizeMap","floor","push","i","CellSizeCalculator","layoutManager","_config","_el","pixelPadding","_getPaddingInPixels","_cellCalculator","_buildLayout","_renderLayout","regions","span","grid","colCnt","tmp","cellIndices","_width","_height","console","warn","extraCol","j","_grid","x","y","regionWid","regionHt","args","halfPadding","tempEl","pixel","indexOf","substr","outerWidth","outerHeight","refresh","newWid","newHt","LayoutManager","plugin","autoRefresh","config","_registerEventListeners","_layoutManager","_resizeHandlerId","_refresh","create","resize","FillPlugin","version","action","makeArray","arguments","splice","removeData","fn"],"mappings":"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","sourcesContent":["var fill = fill || {};\nfill.classes = fill.classes || {};\n\n(function($){\n\n    var DATA_REGEX = /\\b([\\w|-]+)\\s*:\\s*([\\w|\"|'|\\*]+)\\s*;?/g;\n\n    var region = function(el, options){\n        this.el = el;\n        this._init(options);\n    };\n\n    region.prototype.type = \"Region\";\n\n    /**\n     * Initializes the Region which is pretty much just merging the\n     * supplied option set with the defaults\n     * @param options\n     * @private\n     */\n    region.prototype._init = function(options){\n        var str, val, contentClass, defaults;\n\n        this._computed = {};\n\n        //Save off the original style attributes so we can reset things properly if\n        //destroy is called\n        this._origStyle = this.el.attr(\"style\");\n\n        this.el.css( { \"position\" : \"absolute\", margin:0, padding:0 });\n\n        defaults = { row : -1, col: -1,\n                        rowSpan: 1, colSpan: 1,\n                        contentClass : \"\",\n                        top : false, right: false, bottom: false, left: false };\n        this._properties = $.extend({}, defaults, options);\n\n\n        str = this.el.data(\"fill\");\n        if (str) {\n            while(null !== (match = DATA_REGEX.exec(str))){\n                if (3===match.length){\n                    val = match[2];\n                    if (!isNaN(val))\n                        val = parseInt(val, 10);\n                    this._properties[match[1]] = val;\n                }\n            }\n        }\n        //alert(JSON.stringify(this._properties));\n        //If the caller supplied a content class to make styling things a little easier, apply it to the region\n        //wrapper here\n        contentClass = \"\";\n        if (this._properties.contentClass && \"\" !== this._properties.contentClass.trim())\n            contentClass = this._properties.contentClass;\n\n        //Wrap the fill region element in a div. This will allow us to apply padding to the regions and still make\n        //it easy for the user to stylize the original element. Borders, for example would be applied on the outside edges\n        //of the padding (negating the purpose of the padding) if we don't do this wrapping.\n        this.el.wrapInner(\"<div class='fill-region-wrapper \" + contentClass + \"' style='-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box'></div>\");\n    };\n\n    /**\n     * Property getter\n     */\n    region.prototype.get = function(name){\n        if (typeof this._computed[name] !== 'undefined')\n            return(this._computed[name]);\n        else if (typeof this._properties[name] !== 'undefined')\n            return(this._properties[name]);\n        return(null);\n    };\n\n    /**\n     * Property setter\n     * @param name\n     * @param value\n     */\n    region.prototype.setComputed = function(name, value){\n        this._computed[name] = value;\n    };\n\n    /**\n     * Sets flags indicating if this is an edge region and which edges it lies on\n     * @param top\n     * @param right\n     * @param bottom\n     * @param left\n     */\n    region.prototype.setEdges = function(top, right, bottom, left){\n        var removeClass;\n\n        this._properties.top = top;\n        this._properties.right = right;\n        this._properties.bottom = bottom;\n        this._properties.left = left;\n\n        //Add edge classes to this top level element. This is a convenience to enable\n        //users to style these regions a little easier (for example custom padding)\n        this.el.addClass(\"fill\"\n                            + (top ? \" fill-top\" : \"\")\n                            + (right ? \" fill-right\" : \"\")\n                            + (bottom ? \" fill-bottom\" : \"\")\n                            + (left ? \" fill-left\" : \"\"));\n\n        //Remove the edge classes in case they were set previously\n        removeClass = \"\";\n        if (!top)\n            removeClass += \"fill-top \";\n        if (!right)\n            removeClass += \"fill-right \";\n        if (!bottom)\n            removeClass += \"fill-bottom \";\n        if (!left)\n            removeClass += \"fill-left \";\n        this.el.removeClass(removeClass);\n    };\n\n    /**\n     * Fires a resize event if the region's width or height has changed.\n     */\n    region.prototype.fireResizeEvent = function(){\n        var width, height;\n\n        width = this.el.width();\n        height = this.el.height();\n\n        //Populate the event with the old dimensions before we store the new ones\n        data = {\n                    previous : { width: this._properties.width,\n                                    height: this._properties.height },\n                    current : {}\n                };\n\n        this._properties.width = width;\n        this._properties.height = height;\n\n        //Check to see if anything actually changed before firing off the resize event.\n        // Also don't fire a resize event if this is the first time the width and height are\n        //being set\n        if (undefined !== data.previous.width && (data.previous.width !== width || data.previous.height !== height)) {\n\n            data.current.width = width;\n            data.current.height = height;\n\n            this.el.trigger(\"fillresize\", data);\n        }\n\n        //console.log(\"Row=\" + this._properties.row + \" Col=\" + this._properties.col + \" Size=\" + width+\"x\" + height);\n    };\n\n    /**\n     * Reverts the region to its original state (before the fill plugin was applied)\n     */\n    region.prototype.destroy = function(){\n\n        //Remove the .fill-region-wrapper we added at init time.\n        this.el.html($(\"> .fill-region-wrapper\", this.el).html());\n        //Remove the css we applied (as a style attribute) to position/size everything\n        if (this._origStyle)\n            this.el.attr(\"style\", this._origStyle);\n        else\n            this.el.removeAttr(\"style\");\n        //Remove the convenience edge classes we may have added\n        this.el.removeClass(\"fill fill-top fill-right fill-bottom fill-left\");\n    };\n\n    fill.classes.Region = region;\n\n})(jQuery);","var fill = fill || {};\nfill.classes = fill.classes || {};\n\n(function($){\n\n    var listener = function(){\n        this._callbacks = {};\n    };\n\n    /**\n     * Adds a new resize handler to the listener.\n     * @param callback\n     */\n    listener.prototype.addHandler = function(callback){\n        var id, self = this;\n\n        id = new Date().getTime();\n        this._callbacks[id] = callback;\n        //Hook up to the window resize event if this is the first handler applied.\n        if (1===Object.keys(this._callbacks).length){\n            $(window).on(\"resize.fill\", function() { self._fireResizeEvent(); } );\n        }\n        return(id);\n    };\n\n    /**\n     * Removes a resize handler from the listener.\n     * @param callback\n     */\n    listener.prototype.removeHandler = function(id){\n        delete this._callbacks[id];\n        if (0===Object.keys(this._callbacks).length){\n            $(window).off(\"resize.fill\");\n        }\n    };\n\n    listener.prototype._fireResizeEvent = function(){\n        for(var id in this._callbacks){\n            this._callbacks[id]();\n        }\n    };\n\n    fill.classes.WindowResizeListener = new listener();\n\n})(jQuery);","var fill = fill || {};\nfill.classes = fill.classes || {};\n\n(function($){\n\n    var calculator = function(container){\n        this._container = container;\n\n        this._cells = [];\n        this._rowCnt = 0;\n        this._colCnt = 0;\n    };\n\n    /**\n     * Sets the all the row and column indexes to be factored in the size calculations for the layout. This function is\n     * expecting an array of [row index, col index]. It will check to see if a size (width and/or height) was set in\n     * the CSS for any of these indicies and what type of size it is (fixed or percent).\n     */\n    calculator.prototype.createCells = function(cells){\n        var wrapper, map, size, self = this;\n\n\n        wrapper = $(\"<div style='visibility:visible;float:left'><div style='display:inline-block' class='fill-test-cell'></div></div>\").appendTo(this._container);\n        map = {rows:[], cols:[]};\n        //Check to see if a cell size (width and/or height) has been set for the cell. Then save it off in a 2D array for later use\n        $.each(cells, function(index, cell){\n\n            size = self._detectAppliedSizes(cell[0], cell[1], wrapper);\n            map.rows[cell[0]] = size.row;\n            map.cols[cell[1]] = size.col;\n\n            //Keep track of the max # of rows and columns we have\n            self._colCnt = Math.max(self._colCnt, cell[1]);\n            self._rowCnt = Math.max(self._rowCnt, cell[0]);\n\n            //Reset our wrapper element\n            wrapper.width(self._container.innerWidth()).height(self._container.innerHeight());\n        });\n        wrapper.remove();\n        this._cells = map;\n    };\n\n    /**\n     * Checks to see if the user has set a width/height for this col/row in a stylesheet\n     * @param row Integer index of the row as defined in the HTML\n     * @param col Integer index of the column as defined in the HTML\n     * @param wrapper Invisible DOM element which can be used to test for CSS dimensions\n     * @private\n     */\n    calculator.prototype._detectAppliedSizes = function(row, col, wrapper){\n        var testCell, cls, percentSize, width, height, obj; //tODO remove obj\n\n        obj = { row : {}, col: {}};\n\n        cls = \"fill-row-\"+row+\" fill-col-\"+col;\n\n        //Grab a reference to the test cell in the wrapper class and check its width or height. If its not 0, then the user\n        //has set a value for it in the CSS.\n        testCell = $(\".fill-test-cell\", wrapper);\n        testCell.addClass(cls);\n\n        width = { type: \"fill\", size: testCell.width() };\n        if (width.size) {\n            wrapper.width(100);\n\n            percentSize = testCell.width();\n            if (percentSize !== width.size){\n                width.type = \"percent\";\n                width.size = percentSize/100.0;\n            } else {\n                width.type = \"fixed\";\n            }\n        }\n        height = { type: \"fill\", size: testCell.height() };\n        if (height.size) {\n            wrapper.height(100);\n\n            percentSize = testCell.height();\n            if (percentSize !== height.size){\n                height.type = \"percent\";\n                height.size = percentSize/100.0;\n            } else {\n                height.type = \"fixed\";\n            }\n        }\n\n        //Clean up the local changes we made to the wrapper and test cell\n        testCell.removeClass(cls);\n\n        return({ row: height, col: width });\n    };\n\n    /**\n     * TODO comment\n     */\n    calculator.prototype.calculate = function(width, height, padding){\n        var fillCells, remaining, cellSizes;\n\n        remaining = width - (this._colCnt+1)*padding;\n        fillCells = [];\n\n        cellSizes = { };\n        cellSizes.cols = this._calculateCellSizes(this._cells.cols, width, padding);\n        cellSizes.rows = this._calculateCellSizes(this._cells.rows, height, padding);\n\n        return(cellSizes);\n    };\n\n    /**\n     * Iterates the list of cells (assumes its an array of row cells or an array of column cells) and returns a mapping\n     * of cell index to pixel size\n     * @param cells\n     * @param containerSize width or height of the parent container\n     * @param padding\n     * @returns {{}}\n     * @private\n     */\n    calculator.prototype._calculateCellSizes = function(cells, containerSize, padding){\n        var remaining, fillCells, sizeMap;\n\n        remaining = containerSize - (cells.length+1)*padding;\n        fillCells = [];\n        //Iterate the list of cells and populate the size with the width of each cell. For fixed values, simply\n        //copy the value over. Calc percents based on the width minus any padding. Keep track of any \"fill\" columns\n        //so we can go back afterwards and divy up the remaining container width\n        sizeMap = {};\n        for(var index in cells){\n            cell = cells[index];\n            if (\"fixed\" === cell.type) {\n                sizeMap[index] = cell.size;\n                remaining -= sizeMap[index];\n            }\n            else if (\"percent\" === cell.type) {\n                sizeMap[index] = Math.floor(cell.size * containerSize);\n                remaining -= sizeMap[index];\n            }\n            else {\n                fillCells.push(index);\n            }\n        }\n\n        for(var i=0; i<fillCells.length; i++){\n            sizeMap[fillCells[i]] = Math.floor(remaining / fillCells.length);\n        }\n        //TODO make sure sums up to total width\n        return(sizeMap);\n    };\n\n\n    fill.classes.CellSizeCalculator = calculator;\n})(jQuery);","var fill = fill || {};\nfill.classes = fill.classes || {};\n\n(function($){\n\n    var layoutManager = function(el, options){\n        var defaults = { padding: 0 };\n\n        this._config = $.extend({}, defaults, options);\n        this._el = el;\n\n        this._init();\n    };\n\n    /**\n     * Performs miscellaneous initialization logic before kicking off the layout process\n     * @private\n     */\n    layoutManager.prototype._init = function(){\n\n        //Convert the supplied padding value to pixels (if not already)\n        this._config.pixelPadding = this._getPaddingInPixels(this._config.padding);\n\n        //Save off the original style attributes so we can revert things properly when\n        //destroy is called\n        this._origStyle = this._el.attr(\"style\");\n\n        this._el.css({ 'position' : 'relative' });\n\n        this._cellCalculator = new fill.classes.CellSizeCalculator(this._el);\n\n        this._buildLayout();\n\n        this._renderLayout();\n\n        //Fire off an event letting anyone listening that the layout has been applied\n        this._el.trigger(\"fillcreate\", { });\n    };\n\n    /**\n     * TODO comments\n     * @private\n     */\n    layoutManager.prototype._buildLayout = function(){\n        var regions, region, row, col, span, grid, colCnt, tmp, cellIndices;\n\n        this._width = this._el.width();\n        this._height = this._el.height();\n\n        grid = [];\n        cellIndices = [];\n        colCnt = 0;\n        //Use jQuery to find all the regions defined in our fill container. Then iterated the found list of regions and\n        //dump them into a 2 dimension array indexed by row and column. Also keep track of the max column count while\n        //we're at it.\n        regions = $(\"> [data-fill]\", this._el);\n        for(var i=0; i<regions.length; i++){\n\n            region = new fill.classes.Region($(regions[i]), { contentClass : this._config.contentClass} );\n            row = region.get(\"row\");\n            col = region.get(\"col\");\n            if (null===row || null===col|| 0>row || 0>col) {\n                console.warn(\"Fill region does not have a row and col defined. Region will be skipped\");\n                continue;\n            }\n\n            if (!grid[row])\n                grid[row] = [];\n            if (grid[row][col]){\n                console.warn(\"Duplicate region defined for fill region (\"+row + \",\" + col +\"). Region will be skipped.\");\n                continue;\n            }\n\n            grid[row][col] = region;\n            //If this region spans multiple columns, mark them off now.\n            //TODO comments about spanning multiple rows\n            span = region.get(\"colSpan\");\n            if (!isNaN(span) && 1<span){\n                for(var extraCol=col+1; extraCol<col+span; extraCol++){\n                    grid[row][extraCol] = true;\n                }\n            }\n            cellIndices.push([row, col]);\n            colCnt = Math.max(col+1, colCnt);\n        }\n\n        //Now that the initial gird has been built, iterate the cells again and expand out the cells with wildcard\n        //spans\n        for(var i=0; i<grid.length; i++){\n            for (var j=0; j<colCnt; j++){\n                region = grid[i][j];\n\n                if (region && region.type){\n                     //Expand out rows first\n                     if(\"*\" === region.get(\"rowSpan\")) {\n                         span = 1;\n                         for (var tmp = i + 1; tmp < grid.length; tmp++) {\n                             if (grid[tmp][j])\n                                 break;\n\n                             grid[tmp][j] = true;\n                             span++;\n                         }\n                         region.setComputed(\"rowSpan\", span);\n                     }\n                    //Next expand out cols...complicated huh?\n                    if(\"*\" === region.get(\"colSpan\")) {\n                        span = 1;\n                        for (var tmp = j + 1; tmp < colCnt; tmp++) {\n                            if (grid[i][tmp])\n                                break;\n\n                            grid[i][tmp] = true;\n                            span++;\n                        }\n                        region.setComputed(\"colSpan\", span);\n                    }\n\n                    //Tag this region as right/left/top/bottom\n                    region.setEdges(0 == i, //Top\n                        (j - 1 + region.get(\"colSpan\")) == (colCnt - 1), //Right\n                        (i - 1 + region.get(\"rowSpan\")) == (grid.length - 1), //Bottom\n                        0 == j); //Left\n                }\n            }\n        }\n\n        this._grid = grid;\n        //Have the cell calculator preprocess the defined cells to determine which have widths/heights assigned in\n        //the CSS\n        this._cellCalculator.createCells(cellIndices);\n    };\n\n    /**\n     * TODO Comments\n     * @private\n     */\n    layoutManager.prototype._renderLayout = function(){\n        var region, x, y, regionWid, regionHt, args, padding, halfPadding, cellSizes;\n\n        //Skip out of this function if there's nothing in the grid\n        if (!this._grid || 0===this._grid.length)\n            return(0);\n\n        padding = this._config.pixelPadding;\n        halfPadding = padding/2;\n        //Have the cell calculator recalc all the cell sizes based off the current height and\n        //width and padding\n        cellSizes = this._cellCalculator.calculate(this._width, this._height, padding);\n\n        y = padding;\n        for(var row=0; row<this._grid.length; row++){\n            x = padding;\n            for(var col=0; col<this._grid[row].length; col++) {\n\n                //Grab a reference to the next region. Not all spaces in the grid will be populated (because of\n                //multi spanning cols/rows or just left empty). If this is a blank region, skip this loop iteration.\n                region = this._grid[row][col];\n                if (undefined === region || !region.type) {\n                    x += cellSizes.cols[col] + padding;\n                    continue;\n                }\n\n                regionWid = cellSizes.cols[col];\n                for(var tmp = col+1; tmp<col+region.get(\"colSpan\"); tmp++) {\n                    regionWid += cellSizes.cols[tmp] + padding;\n                }\n                regionHt = cellSizes.rows[row];\n                for(var tmp = row+1; tmp<row+region.get(\"rowSpan\"); tmp++) {\n                    regionHt += cellSizes.rows[tmp] + padding;\n                }\n\n                args = { top: y+\"px\",\n                    left: x +\"px\",\n                    width : regionWid + \"px\",\n                    height: regionHt +\"px\" };\n\n                //If this region is a right or bottom edge, remove the width/height and set the\n                //right / bottom properties. This mimimizes the effect of an incorrectly reported\n                //container size as referenced in issue #2.\n                if (region.get(\"right\"))\n                {\n                    delete args.width;\n                    args.right = this._width - (x + regionWid) + \"px\";\n                }\n                if (region.get(\"bottom\")){\n                    delete args.height;\n                    args.bottom = this._height - (y + regionHt) + \"px\";\n                }\n                //alert(JSON.stringify(args));\n                region.el.css(args);\n                region.fireResizeEvent();\n\n                x += cellSizes.cols[col] + padding;\n            }\n            y += cellSizes.rows[row] + padding;\n        }\n    };\n\n    /**\n     * Returns the configured padding in pixels (as an integer)\n     * @private\n     */\n    layoutManager.prototype._getPaddingInPixels = function(padding){\n        var tempEl, pixel = padding;\n\n        //First check the supplied padding value. This will have been supplied in the JS options\n        //when the plugin was applied to the element. If a padding was not supplied in the options\n        //then check to see if a padding was defined in the CSS via the fill-padding class\n        if(\"string\" === typeof(padding)){\n            //If the value was already supplied as pixels, just parse the string and return the value\n            //as an integer\n            if (padding.indexOf(\"px\") === (padding.length-2)){\n                pixel = parseInt(padding.substr(0, padding.length-2), 10);\n            } else {\n                //If its not supplied in pixels, we'll have to add a temporary element to the container\n                //and set the size to see the pixel value when applied to the DOM\n                tempEl = $(\"<div style='position:absolute;visible:visible;width:\"+padding+\"'></div>\").appendTo(this._el);\n                pixel = tempEl.width();\n                tempEl.remove();\n            }\n        } else {\n            tempEl = $(\"<div style='position:absolute;visible:visible;' class='fill-padding'></div>\").appendTo(this._el);\n            if (tempEl.outerWidth() === tempEl.outerHeight()) {\n                pixel = Math.floor(tempEl.outerWidth() / 2);\n            } else {\n                console.warn(\"Fill layout manager does not support different vertical and horizontal paddings.\");\n                pixel = 0;\n            }\n            tempEl.remove();\n        }\n        return(pixel);\n    };\n\n    layoutManager.prototype.refresh = function(){\n        //TODO check for changes to HTML? padding?\n        var newWid, newHt;\n\n        newWid = this._el.width();\n        newHt = this._el.height();\n\n        if (newWid !== this._width || newHt !== this._height) {\n            this._width = newWid;\n            this._height = newHt;\n            this._renderLayout();\n        }\n    };\n\n    /**\n     * Reverts the fill container and components to their original state (before the fill plugin was applied)\n     */\n    layoutManager.prototype.destroy = function(){\n        var region;\n\n        //Call destroy on each component in the grid\n        if (0<this._grid.length) {\n            for (var i = 0; i < this._grid.length; i++) {\n                for (var j = 0; j < this._grid[i].length; j++) {\n\n                    region = this._grid[i][j];\n                    if (typeof region === \"undefined\" || null===region)\n                        continue;\n\n                    region.destroy();\n                }\n            }\n        }\n\n        //Revert the container to its original style attributes\n        if (this._origStyle)\n            this._el.attr(\"style\", this._origStyle);\n        else\n            this._el.removeAttr(\"style\");\n\n        //Fire off an event letting anyone listening that the layout has been removed\n        this._el.trigger(\"filldestroy\", { });\n    };\n\n    fill.classes.LayoutManager = layoutManager;\n\n})(jQuery);","var fill = fill || {};\nfill.classes = fill.classes || {};\n\n(function($){\n\n    var plugin = function(el, options){\n\n        var defaults = { autoRefresh : true };\n        this._init(el, $.extend({}, defaults, options));\n    };\n\n    /**\n     * Performs initialization logic for the plugin\n     * @private\n     */\n    plugin.prototype._init = function(el, config){\n        var self = this;\n\n        this._el = el;\n        this._config = config;\n\n        this._registerEventListeners();\n        this._layoutManager = new fill.classes.LayoutManager(el, config);\n\n        if (this._config.autoRefresh)\n            this._resizeHandlerId = fill.classes.WindowResizeListener.addHandler(function(){ self._refresh(); });\n    };\n\n    /**\n     * Adds any callback supplied in the options to the element as jquery event listeners\n     * @private\n     */\n    plugin.prototype._registerEventListeners = function(){\n        if (this._config.create)\n            this._el.on(\"fillcreate.fill-internal\", this._config.create);\n        if (this._config.resize)\n            this._el.on(\"fillresize.fill-internal\", this._config.resize);\n        if (this._config.destroy)\n            this._el.on(\"filldestroy.fill-internal\", this._config.destroy);\n    };\n\n    /**\n     * Refreshes the fill components layout. This may be called via a window resize event or be the caller.\n     * @private\n     */\n    plugin.prototype._refresh = function(){\n        //TODO just recalc component sizes\n        //TODO just reapply properties\n        this._layoutManager.refresh();\n    };\n\n    plugin.prototype.refresh = function(){\n        this._refresh();\n    };\n\n    /**\n     * Reverts all DOM elements to their original state before the fill plugin was applied\n     */\n    plugin.prototype.destroy = function(){\n        //1. Remove the window resize handler (if it was applied)\n        //2. Call destroy on the layout manager which will then call destroy on all the fill component DOM elements\n        //3. Delete the layout manager, just because...\n        //4. Clean up any event listeners we added\n        if (this._resizeHandlerId)\n            fill.classes.WindowResizeListener.removeHandler(this._resizeHandlerId);\n\n        this._layoutManager.destroy();\n        delete this._layoutManager;\n\n        this._el.off(\"fillcreate.fill-internal\");\n        this._el.off(\"filldestroy.fill-internal\");\n        this._el.off(\"fillresize.fill-internal\");\n    };\n\n    fill.classes.FillPlugin = plugin;\n\n})(jQuery);","var fill = fill || {};\n\n(function($){\n\n    fill.version = \"0.1.0\";\n\n    var plugin = function() {\n            var el, plugin, args, action, options;\n\n            //var start = window.performance.now();\n\n            //Grab any arguments passed into the fill function and convert to array. If the 1st argument is a string,\n            //then the caller is requesting some action to be performed on an existance instance of fill (refresh,\n            //destroy) etc. The second argument may be a JSON object of parameters to pass into the function. If the\n            //first argument is not a string, then it must be a JSON object of parameters that will be passed into the\n            //c'tor of our fill plugin class\n            args = $.makeArray(arguments);\n            if (\"string\" === typeof args[0]) {\n                action = args[0];\n                args = args.splice(0);\n            }\n            options = args[0];\n\n            //Loop through the elements that matched the user's selector and create a Fill plugin for each one\n            $.each(this, function () {\n\n                el = $(this);\n                plugin = el.data(\"fill-pi\");\n                if (!plugin && !action)\n                {\n                    plugin = new fill.classes.FillPlugin(el, options);\n                    el.data('fill-pi', plugin);\n                } else if (plugin && action){\n                    plugin[action](options);\n                    //Destroy is a special case\n                    if (\"destroy\" === action)\n                        el.removeData(\"fill-pi\");\n                }\n            })\n\n            //var end = window.performance.now();\n            //console.log(\"Fill plug-in time: \" + (end-start) + \"millis\");\n\n            return (this);\n        }\n\n    //Add the fill plug-in to jQuery\n    if (!$.fn.fill)\n        $.fn.fill = plugin;\n    else\n        console.warn(\"jQuery.fn.fill is already defined. Fill Layout Manager cannot be loaded.\");\n\n})(jQuery);"]}